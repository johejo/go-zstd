package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"log"
	"os"
	"strings"
	"text/template"
)

func main() {
	log.SetFlags(log.Lshortfile | log.LstdFlags)
	t, err := template.New("").Parse(tmpl)
	if err != nil {
		log.Fatal(err)
	}
	bs := bufio.NewScanner(os.Stdin)

	var pairs []Pair
	for bs.Scan() {
		line := strings.TrimSpace(bs.Text())
		for _, s := range strings.Split(line, ",") {
			if k, v, ok := strings.Cut(s, "="); ok {
				p := strings.Split(k, "_")
				var name string
				if len(p) > 2 {
					name = strings.Join(p[len(p)-2:], "_")
				} else {
					name = strings.Join(p[len(p)-1:], "_")
				}
				pairs = append(pairs, Pair{
					Name:  name,
					Value: v,
				})
			}
		}
	}
	var buf bytes.Buffer
	if err := t.Execute(&buf, tmplCtx{
		EnumName: os.Args[1],
		Pairs:    pairs,
	}); err != nil {
		log.Fatal(err)
	}
	b, err := format.Source(buf.Bytes())
	if err != nil {
		fmt.Print(buf.String())
		log.Fatal(err)
	}
	os.Stdout.Write(b)
}

type tmplCtx struct {
	EnumName string
	Pairs    []Pair
}

type Pair struct {
	Name  string
	Value string
}

const tmpl = `// Code generated by internal/cenum2go/main.go DO NOT EDIT.
package zstd

{{- $enumName := .EnumName }}
type {{ $enumName }} int

const (
	{{- range .Pairs }}
	{{ $enumName }}_{{ .Name }} {{ $enumName }} = {{ .Value }}
	{{- end }}
)
`
